@page "/"

@using BlazorSecurity.Data
@using Microsoft.AspNetCore.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">Authorized</div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-item px-3">NON-Authorized</div>
    </NotAuthorized>
</AuthorizeView>

@if (_isAuthenticated)
{
    <div class="nav-item px-3">You are sgu Authorized</div>
    @if (_isAdmin)
    {
        <div class="nav-item px-3">ADMIN</div>
    }
    else
    {
        <div class="nav-item px-3">NOT AN ADMIN</div>
    }
}
else
{
    <div class="nav-item px-3">You are sgu NON-Authorized</div>
}

@code
{
    private bool _isAuthenticated;
    private bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        _isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        _isAdmin = authState.User.IsInRole("Administrator");

        // await CreateUserRoleAsync("Administrator", "lasse1@live.dk");
    }

    private async Task CreateUserRoleAsync(string roleName, string? email)
    {
        var roleManager = ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var roleExists = await roleManager.RoleExistsAsync(roleName);

        if (!roleExists)
        {
            var role = new IdentityRole(roleName);
            await roleManager.CreateAsync(role);
        }

        var identityUser = await UserManager.FindByEmailAsync(email);

        if (identityUser is null)
        {
            return;
        }
        
        await UserManager.AddToRoleAsync(identityUser, roleName);
    }
}
