@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorSecurity.Data
@using BlazorSecurity.Hashing

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject CprDbContext CprDbContext;
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IServiceProvider ServiceProvider
@inject Hasher Hasher

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <h2>Create a new account.</h2>
            <hr/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password"/>
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.CprNumber" class="form-control" autocomplete="DDMMYYYYXXXX" aria-required="true" placeholder="DDMMYYYYXXXX"/>
                <label for="cpr-number">CPR number</label>
                <ValidationMessage For="() => Input.CprNumber" class="text-danger"/>
            </div>
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.ConfirmCprNumber" class="form-control" autocomplete="DDMMYYYYXXXX" aria-required="true" placeholder="DDMMYYYYXXXX"/>
                <label for="confirm-cpr-number">Confirm CPR number</label>
                <ValidationMessage For="() => Input.ConfirmCprNumber" class="text-danger"/>
            </div>
            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.IsAdmin" class="form-check-input"/>
                <label class="form-check-label" for="is-admin">
                    Is Admin
                </label>
                <ValidationMessage For="() => Input.IsAdmin" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr/>
            <ExternalLoginPicker/>
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.TwoFactorEnabled = true;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        
        if (Input.IsAdmin)
        {
            await CreateUserRoleAsync(UserRoles.Admin, Input.Email);
        }

        var hashedCprNumber = Hasher.ComputeBCrypt(Input.CprNumber);

        await SaveCprUser(userId, hashedCprNumber);
        
        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }
        
        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private async Task SaveCprUser(string userId, string cprNumberHash, byte[]? salt = null)
    {
        var user = new CprUser
        {
            UserId = userId,
            CprNumberHash = cprNumberHash,
            PasswordSalt = salt
        };

        // Add the new CPR user to the database
        CprDbContext.CprUsers.Add(user);
        await CprDbContext.SaveChangesAsync();
    }
    
    private async Task CreateUserRoleAsync(string roleName, string email)
    {
        var roleManager = ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var roleExists = await roleManager.RoleExistsAsync(roleName);

        if (!roleExists)
        {
            var role = new IdentityRole(roleName);
            await roleManager.CreateAsync(role);
        }

        var identityUser = await UserManager.FindByEmailAsync(email);

        if (identityUser is null)
        {
            return;
        }
        
        await UserManager.AddToRoleAsync(identityUser, roleName);
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
        
        [Required]
        [Display(Name = "CPR number")]
        [RegularExpression(@"^\d{10}$", ErrorMessage = "The CPR number must be exactly 10 digits.")]
        public string CprNumber { get; set; } = "";
        
        [Display(Name = "Confirm CPR number")]
        [Compare("CprNumber", ErrorMessage = "The CPR number and confirmation CPR number do not match.")]
        public string ConfirmCprNumber { get; set; } = "";
        
        [Required]
        [Display(Name = "IsAdmin")]
        public bool IsAdmin { get; set; }
    }
}